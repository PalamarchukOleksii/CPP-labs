import copy
from pathlib import Path
import pytest
from xvm.vm import VM

class MyIO:
    def __init__(self, in_buffer):
        self.in_buffer = copy.deepcopy(in_buffer)
        self.out_buffer = []

    def print_fn(self, obj):
        self.out_buffer.append(obj)

    def input_fn(self):
        a = self.in_buffer.pop(0)
        if isinstance(a, str):
            try:
                return int(a)
            except ValueError:
                return float(a)
        return a

def run_vm_test(base, exponent):
    DIR = Path(__file__).parent.resolve() 
    JSON_PATH = DIR / "test_part8_code.json"
    io = MyIO([base, exponent])
    vm = VM(input_fn=io.input_fn, print_fn=io.print_fn)
    stack, variables = vm.run_code_from_json(JSON_PATH)
    return variables, io
@pytest.mark.parametrize("base, exponent, expected", [
    (2, 10, 1024),
    (3, 4, 81),
    (5, 7, 78125),
    (5, 0, 1),
    (7, 1, 7),
    (10, 5, 100000),
    (2, 100, 1267650600228229401496703205376),
    (2, 1000, 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376),
    (5, 100, 7888609052210118054117285652827862296732064351090230047702789306640625),
    (7, 50, 1798465042647412146620280340569649349251249),
    (2, 500, 3273390607896141870013189696827599152216642046043064789483291368096133796404674554883270092325904157150886684127560071009217256545885393053328527589376),
    (10, 100, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
    (2, 2000, 114813069527425452423283320117768198402231770208869520047764273682576626139237031385665948631650626991844596463898746277344711896086305533142593135616665318539129989145312280000688779148240044871428926990063486244781615463646388363947317026040466353970904996558162398808944629605623311649536164221970332681344168908984458505602379484807914058900934776500429002716706625830522008132236281291761267883317206598995396418127021779858404042159853183251540889433902091920554957783589672039160081957216630582755380425583726015528348786419432054508915275783882625175435528800822842770817965453762184851149029376),
    (1, 10000, 1),
    (2, 64, 18446744073709551616),
    (2, 128, 340282366920938463463374607431768211456),
])

def test_fast_exponentiation(base, exponent, expected):
    variables, io = run_vm_test(base, exponent)
    assert variables["base"] == base
    assert variables["exponent"] == exponent
    assert variables["result"] == expected
    assert io.out_buffer[-1] == expected
